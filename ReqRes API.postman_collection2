{
	"info": {
		"_postman_id": "0b7d2fbb-074e-4f83-a015-a514c9f2520b",
		"name": "ReqRes API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32872262"
	},
	"item": [
		{
			"name": "ResourceList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.page).to.exist;",
							"    pm.expect(responseData.per_page).to.exist;",
							"    pm.expect(responseData.total).to.exist;",
							"    pm.expect(responseData.total_pages).to.exist;",
							"    pm.expect(responseData.data).to.exist;",
							"    pm.expect(responseData.support).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.data.length).to.be.at.least(1, \"'data' array should contain at least one element\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the existence of the 'support' object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.support).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Task}}/{resource}\n",
					"host": [
						"{{Task}}"
					],
					"path": [
						"{resource}\n"
					],
					"query": [
						{
							"key": "from",
							"value": "2024-02-12",
							"disabled": true
						},
						{
							"key": "sortBy",
							"value": "publishedAt",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UsersList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response and contains the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"  ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist;",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    pm.expect(responseData.data.length).to.equal(1);",
							"});",
							"",
							"",
							"pm.test(\"Verify the support object exists\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.support).to.exist.and.to.be.an('object');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Task}}/users\n",
					"host": [
						"{{Task}}"
					],
					"path": [
						"users\n"
					],
					"query": [
						{
							"key": "country",
							"value": "eg",
							"disabled": true
						},
						{
							"key": "category",
							"value": "ramadan",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetches aUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.data.id).to.be.a('number');",
							"  pm.expect(responseData.data.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Year is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data.year).to.be.a('number');",
							"  pm.expect(responseData.data.year).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Name should be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Task}}/user/6\n",
					"host": [
						"{{Task}}"
					],
					"path": [
						"user",
						"6\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "update a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'updatedAt'\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.updatedAt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify updatedAt is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"updatedAt should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Response content type is 'application/json'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"updatedAt\": \"Asmaa Saif Zidan \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/user/6\n",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"user",
						"6\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUserPatch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - updatedAt\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.updatedAt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"updatedAt is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.updatedAt).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Name is updated successfully\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.updatedAt).to.exist.and.to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/5\n?name=Asmaa Saif Zidan ",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"5\n"
					],
					"query": [
						{
							"key": "name",
							"value": "Asmaa Saif Zidan "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAfterUpdate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate page, per_page, total, and total_pages fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.page).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.per_page).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.total).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.total_pages).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.data.length).to.be.at.least(1, \"Data array should contain at least one element\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'support' object is present\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.support).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users\n",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete aUser",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/{5}\n",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"{5}\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ResUnkown",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/{resource}/13\n",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"{resource}",
						"13\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update res unkowen",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - updatedAt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.updatedAt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"updatedAt is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"updatedAt should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Year in request URL matches value in response\", function () {",
							"    const responseData = pm.response.json();",
							"    const requestUrl = pm.request.url;",
							"    const requestYear = requestUrl.query.get(\"year\");",
							"    ",
							"    pm.expect(responseData.updatedAt).to.equal(requestYear);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/{resource}/{5}\n?year=2005",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"{resource}",
						"{5}\n"
					],
					"query": [
						{
							"key": "year",
							"value": "2005"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update resours by patch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - updatedAt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.updatedAt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"updatedAt is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"updatedAt is not in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Year parameter is correctly passed and equals 2005\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(pm.request.url.query.get('year')).to.equal('2005');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/{resource}/{5}\n?year=2005",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"{resource}",
						"{5}\n"
					],
					"query": [
						{
							"key": "year",
							"value": "2005"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteResource",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/{resource}/{5}\n?year=2005",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"{resource}",
						"{5}\n"
					],
					"query": [
						{
							"key": "year",
							"value": "2005"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CreatAsession",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.username).to.exist;",
							"    pm.expect(responseData.email).to.exist;",
							"    pm.expect(responseData.password).to.exist;",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.createdAt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Password is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \" Asmaa\",\r\n  \"email\": \"Task3@gmail.com\",\r\n  \"password\": \"123123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/login\n",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"login\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Auser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.username).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.email).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.password).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.id).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"});",
							"",
							"",
							"pm.test(\"Password is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"ID is a positive integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id).to.exist.and.to.be.a('number', \"ID should be a number\");",
							"  pm.expect(responseData.id).to.be.above(0, \"ID should be a positive integer\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \" Asmaa\",\r\n  \"email\": \"Task3@gmail.com\",\r\n  \"password\": \"123123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register\n",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ends A session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id and createdAt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/logout\n",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"logout\n"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Task",
			"value": "https://reqres.in/api",
			"type": "string"
		}
	]
}